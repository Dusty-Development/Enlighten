plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.0.21"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		url = "https://api.modrinth.com/maven"
	}
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}

	// Forge?
	maven {
		url = 'https://maven.minecraftforge.net/'
	}

	// Lodestone + Dependencies
	maven {
		name = "Curios maven"
		url = uri("https://maven.theillusivec4.top/")
	}
	maven {
		name = "JEI maven"
		url = uri("https://dvs1.progwml6.com/files/maven")
	}
	maven {
		name = "tterrag maven"
		url = uri("https://maven.tterrag.com/")
	}
	maven {
		name = "BlameJared maven"
		url = uri("https://maven.blamejared.com/")
	}
	maven {
		name = "Curse Maven"
		url = uri("https://cursemaven.com")
		content {
			includeGroup("curse.maven")
		}
	}

	maven {
		name = "jitpack"
		url = uri("https://jitpack.io")
		content {
			includeGroup("io.github")
		}
	}
	maven { url = "https://maven.ladysnake.org/releases" }
	maven { url = "https://maven.terraformersmc.com/" }
	maven { url = "https://maven.parchmentmc.org" }
	maven { url = "https://mvn.devos.one/snapshots/" }
	maven { url = "https://mvn.devos.one/releases/" }
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
	maven { url = "https://maven.greenhouseteam.dev/releases/" }
	maven { url = "https://maven.shedaniel.me/" }
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	// AAA Particles
//	modImplementation "maven.modrinth:aaa-particles:${project.aaa_particle_version}"
//	modImplementation "maven.modrinth:architectury-api:${project.architecture_version}+fabric"

	//Sodium
//	compileOnly("maven.modrinth:sodium:${project.sodium_version}")
//	compileOnly("maven.modrinth:iris:${project.iris_version}")

	// GeckoLib
//	modImplementation "software.bernie.geckolib:geckolib-fabric-${project.minecraft_version}:${project.geckolib_version}"

	// Lodestone
//	modImplementation("curse.maven:lodestone-616457:5956509")
//	modImplementation("team.lodestar.lodestone:lodestone:${project.minecraft_version}-${project.lodestone_version}")
//	modImplementation("maven.modrinth:bN3xUWdo:${project.minecraft_version}-${project.lodestone_version}-fabric")

	// Cardinal Components
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-world:${project.cca_version}"
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-scoreboard:${project.cca_version}"
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-block:${project.cca_version}"

	include "org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	include "org.ladysnake.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
	include "org.ladysnake.cardinal-components-api:cardinal-components-world:${project.cca_version}"
	include "org.ladysnake.cardinal-components-api:cardinal-components-scoreboard:${project.cca_version}"
	include "org.ladysnake.cardinal-components-api:cardinal-components-block:${project.cca_version}"

	modImplementation("dev.emi:trinkets:${project.trinkets_version}")
//	modImplementation("com.jamieswhiteshirt:reach-wish_contract-attributes:${project.reach_entity_attributes_version}")


//	def portLibVersion = project.property('port_lib_version')
//	def portLibModules = project.property('port_lib_modules').split(',')
//
//	portLibModules.each { module ->
//		dependencies {
//			include "io.github.fabricators_of_create.Porting-Lib:${module}:${portLibVersion}"
//			modApi "io.github.fabricators_of_create.Porting-Lib:${module}:${portLibVersion}"
//		}
//	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}


tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 21
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		if (System.getenv("GITHUB_ACTOR") != null) {
			println "Publishing to Github Packages"
			maven {
				name = "GitHubPackages"
				url = uri("https://maven.pkg.github.com/Dusty-Development/Enlighten")
				credentials {
					username = System.getenv("GITHUB_ACTOR")
					password = System.getenv("GITHUB_TOKEN")
				}
			}
		}
	}
}